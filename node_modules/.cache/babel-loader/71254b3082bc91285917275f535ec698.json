{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof3 = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _rcFieldForm = require(\"rc-field-form\");\n\nvar _FieldContext = _interopRequireDefault(require(\"rc-field-form/lib/FieldContext\"));\n\nvar _ref2 = require(\"rc-util/lib/ref\");\n\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\n\nvar _row = _interopRequireDefault(require(\"../grid/row\"));\n\nvar _configProvider = require(\"../config-provider\");\n\nvar _type = require(\"../_util/type\");\n\nvar _devWarning = _interopRequireDefault(require(\"../_util/devWarning\"));\n\nvar _FormItemLabel = _interopRequireDefault(require(\"./FormItemLabel\"));\n\nvar _FormItemInput = _interopRequireDefault(require(\"./FormItemInput\"));\n\nvar _context = require(\"./context\");\n\nvar _util = require(\"./util\");\n\nvar _reactNode = require(\"../_util/reactNode\");\n\nvar _useFrameState3 = _interopRequireDefault(require(\"./hooks/useFrameState\"));\n\nvar _useItemRef = _interopRequireDefault(require(\"./hooks/useItemRef\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar NAME_SPLIT = '__SPLIT__';\nvar ValidateStatuses = (0, _type.tuple)('success', 'warning', 'error', 'validating', '');\nvar MemoInput = /*#__PURE__*/React.memo(function (_ref) {\n  var children = _ref.children;\n  return children;\n}, function (prev, next) {\n  return prev.value === next.value && prev.update === next.update;\n});\n\nfunction hasValidName(name) {\n  if (name === null) {\n    (0, _devWarning[\"default\"])(false, 'Form.Item', '`null` is passed as `name` property');\n  }\n\n  return !(name === undefined || name === null);\n}\n\nfunction FormItem(props) {\n  var name = props.name,\n      fieldKey = props.fieldKey,\n      noStyle = props.noStyle,\n      dependencies = props.dependencies,\n      customizePrefixCls = props.prefixCls,\n      style = props.style,\n      className = props.className,\n      shouldUpdate = props.shouldUpdate,\n      hasFeedback = props.hasFeedback,\n      help = props.help,\n      rules = props.rules,\n      validateStatus = props.validateStatus,\n      children = props.children,\n      required = props.required,\n      label = props.label,\n      messageVariables = props.messageVariables,\n      _props$trigger = props.trigger,\n      trigger = _props$trigger === void 0 ? 'onChange' : _props$trigger,\n      validateTrigger = props.validateTrigger,\n      hidden = props.hidden,\n      restProps = __rest(props, [\"name\", \"fieldKey\", \"noStyle\", \"dependencies\", \"prefixCls\", \"style\", \"className\", \"shouldUpdate\", \"hasFeedback\", \"help\", \"rules\", \"validateStatus\", \"children\", \"required\", \"label\", \"messageVariables\", \"trigger\", \"validateTrigger\", \"hidden\"]);\n\n  var destroyRef = (0, React.useRef)(false);\n\n  var _useContext = (0, React.useContext)(_configProvider.ConfigContext),\n      getPrefixCls = _useContext.getPrefixCls;\n\n  var _useContext2 = (0, React.useContext)(_context.FormContext),\n      formName = _useContext2.name,\n      requiredMark = _useContext2.requiredMark;\n\n  var _useContext3 = (0, React.useContext)(_context.FormItemContext),\n      updateItemErrors = _useContext3.updateItemErrors;\n\n  var _React$useState = React.useState(!!help),\n      _React$useState2 = (0, _slicedToArray2[\"default\"])(_React$useState, 2),\n      domErrorVisible = _React$useState2[0],\n      innerSetDomErrorVisible = _React$useState2[1];\n\n  var _useFrameState = (0, _useFrameState3[\"default\"])({}),\n      _useFrameState2 = (0, _slicedToArray2[\"default\"])(_useFrameState, 2),\n      inlineErrors = _useFrameState2[0],\n      setInlineErrors = _useFrameState2[1];\n\n  var _useContext4 = (0, React.useContext)(_FieldContext[\"default\"]),\n      contextValidateTrigger = _useContext4.validateTrigger;\n\n  var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : contextValidateTrigger;\n\n  function setDomErrorVisible(visible) {\n    if (!destroyRef.current) {\n      innerSetDomErrorVisible(visible);\n    }\n  }\n\n  var hasName = hasValidName(name); // Cache Field NamePath\n\n  var nameRef = (0, React.useRef)([]); // Should clean up if Field removed\n\n  React.useEffect(function () {\n    return function () {\n      destroyRef.current = true;\n      updateItemErrors(nameRef.current.join(NAME_SPLIT), []);\n    };\n  }, []);\n  var prefixCls = getPrefixCls('form', customizePrefixCls); // ======================== Errors ========================\n  // Collect noStyle Field error to the top FormItem\n\n  var updateChildItemErrors = noStyle ? updateItemErrors : function (subName, subErrors, originSubName) {\n    setInlineErrors(function () {\n      var prevInlineErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // Clean up origin error when name changed\n\n      if (originSubName && originSubName !== subName) {\n        delete prevInlineErrors[originSubName];\n      }\n\n      if (!(0, _isEqual[\"default\"])(prevInlineErrors[subName], subErrors)) {\n        return (0, _extends3[\"default\"])((0, _extends3[\"default\"])({}, prevInlineErrors), (0, _defineProperty2[\"default\"])({}, subName, subErrors));\n      }\n\n      return prevInlineErrors;\n    });\n  }; // ===================== Children Ref =====================\n\n  var getItemRef = (0, _useItemRef[\"default\"])();\n\n  function renderLayout(baseChildren, fieldId, meta, isRequired) {\n    var _itemClassName;\n\n    var _a;\n\n    if (noStyle && !hidden) {\n      return baseChildren;\n    } // ======================== Errors ========================\n    // >>> collect sub errors\n\n\n    var subErrorList = [];\n    Object.keys(inlineErrors).forEach(function (subName) {\n      subErrorList = [].concat((0, _toConsumableArray2[\"default\"])(subErrorList), (0, _toConsumableArray2[\"default\"])(inlineErrors[subName] || []));\n    }); // >>> merged errors\n\n    var mergedErrors;\n\n    if (help !== undefined && help !== null) {\n      mergedErrors = (0, _util.toArray)(help);\n    } else {\n      mergedErrors = meta ? meta.errors : [];\n      mergedErrors = [].concat((0, _toConsumableArray2[\"default\"])(mergedErrors), (0, _toConsumableArray2[\"default\"])(subErrorList));\n    } // ======================== Status ========================\n\n\n    var mergedValidateStatus = '';\n\n    if (validateStatus !== undefined) {\n      mergedValidateStatus = validateStatus;\n    } else if (meta === null || meta === void 0 ? void 0 : meta.validating) {\n      mergedValidateStatus = 'validating';\n    } else if (((_a = meta === null || meta === void 0 ? void 0 : meta.errors) === null || _a === void 0 ? void 0 : _a.length) || subErrorList.length) {\n      mergedValidateStatus = 'error';\n    } else if (meta === null || meta === void 0 ? void 0 : meta.touched) {\n      mergedValidateStatus = 'success';\n    }\n\n    var itemClassName = (_itemClassName = {}, (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item\"), true), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-with-help\"), domErrorVisible || !!help), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(className), !!className), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-has-feedback\"), mergedValidateStatus && hasFeedback), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-has-success\"), mergedValidateStatus === 'success'), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-has-warning\"), mergedValidateStatus === 'warning'), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-has-error\"), mergedValidateStatus === 'error'), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-is-validating\"), mergedValidateStatus === 'validating'), (0, _defineProperty2[\"default\"])(_itemClassName, \"\".concat(prefixCls, \"-item-hidden\"), hidden), _itemClassName); // ======================= Children =======================\n\n    return /*#__PURE__*/React.createElement(_row[\"default\"], (0, _extends3[\"default\"])({\n      className: (0, _classnames[\"default\"])(itemClassName),\n      style: style,\n      key: \"row\"\n    }, (0, _omit[\"default\"])(restProps, ['colon', 'extra', 'getValueFromEvent', 'getValueProps', 'htmlFor', 'id', 'initialValue', 'isListField', 'labelAlign', 'labelCol', 'normalize', 'preserve', 'tooltip', 'validateFirst', 'valuePropName', 'wrapperCol', '_internalItemRender'])), /*#__PURE__*/React.createElement(_FormItemLabel[\"default\"], (0, _extends3[\"default\"])({\n      htmlFor: fieldId,\n      required: isRequired,\n      requiredMark: requiredMark\n    }, props, {\n      prefixCls: prefixCls\n    })), /*#__PURE__*/React.createElement(_FormItemInput[\"default\"], (0, _extends3[\"default\"])({}, props, meta, {\n      errors: mergedErrors,\n      prefixCls: prefixCls,\n      status: mergedValidateStatus,\n      onDomErrorVisibleChange: setDomErrorVisible,\n      validateStatus: mergedValidateStatus\n    }), /*#__PURE__*/React.createElement(_context.FormItemContext.Provider, {\n      value: {\n        updateItemErrors: updateChildItemErrors\n      }\n    }, baseChildren)));\n  }\n\n  var isRenderProps = typeof children === 'function'; // Record for real component render\n\n  var updateRef = (0, React.useRef)(0);\n  updateRef.current += 1;\n\n  if (!hasName && !isRenderProps && !dependencies) {\n    return renderLayout(children);\n  }\n\n  var variables = {};\n\n  if (typeof label === 'string') {\n    variables.label = label;\n  } else if (name) {\n    variables.label = String(name);\n  }\n\n  if (messageVariables) {\n    variables = (0, _extends3[\"default\"])((0, _extends3[\"default\"])({}, variables), messageVariables);\n  }\n\n  return /*#__PURE__*/React.createElement(_rcFieldForm.Field, (0, _extends3[\"default\"])({}, props, {\n    messageVariables: variables,\n    trigger: trigger,\n    validateTrigger: mergedValidateTrigger,\n    onReset: function onReset() {\n      setDomErrorVisible(false);\n    }\n  }), function (control, meta, context) {\n    var errors = meta.errors;\n    var mergedName = (0, _util.toArray)(name).length && meta ? meta.name : [];\n    var fieldId = (0, _util.getFieldId)(mergedName, formName);\n\n    if (noStyle) {\n      // Clean up origin one\n      var originErrorName = nameRef.current.join(NAME_SPLIT);\n      nameRef.current = (0, _toConsumableArray2[\"default\"])(mergedName);\n\n      if (fieldKey) {\n        var fieldKeys = Array.isArray(fieldKey) ? fieldKey : [fieldKey];\n        nameRef.current = [].concat((0, _toConsumableArray2[\"default\"])(mergedName.slice(0, -1)), (0, _toConsumableArray2[\"default\"])(fieldKeys));\n      }\n\n      updateItemErrors(nameRef.current.join(NAME_SPLIT), errors, originErrorName);\n    }\n\n    var isRequired = required !== undefined ? required : !!(rules && rules.some(function (rule) {\n      if (rule && (0, _typeof2[\"default\"])(rule) === 'object' && rule.required) {\n        return true;\n      }\n\n      if (typeof rule === 'function') {\n        var ruleEntity = rule(context);\n        return ruleEntity && ruleEntity.required;\n      }\n\n      return false;\n    })); // ======================= Children =======================\n\n    var mergedControl = (0, _extends3[\"default\"])({}, control);\n    var childNode = null;\n    (0, _devWarning[\"default\"])(!(shouldUpdate && dependencies), 'Form.Item', \"`shouldUpdate` and `dependencies` shouldn't be used together. See https://ant.design/components/form/#dependencies.\");\n\n    if (Array.isArray(children) && hasName) {\n      (0, _devWarning[\"default\"])(false, 'Form.Item', '`children` is array of render props cannot have `name`.');\n      childNode = children;\n    } else if (isRenderProps && (!(shouldUpdate || dependencies) || hasName)) {\n      (0, _devWarning[\"default\"])(!!(shouldUpdate || dependencies), 'Form.Item', '`children` of render props only work with `shouldUpdate` or `dependencies`.');\n      (0, _devWarning[\"default\"])(!hasName, 'Form.Item', \"Do not use `name` with `children` of render props since it's not a field.\");\n    } else if (dependencies && !isRenderProps && !hasName) {\n      (0, _devWarning[\"default\"])(false, 'Form.Item', 'Must set `name` or use render props when `dependencies` is set.');\n    } else if ((0, _reactNode.isValidElement)(children)) {\n      (0, _devWarning[\"default\"])(children.props.defaultValue === undefined, 'Form.Item', '`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.');\n      var childProps = (0, _extends3[\"default\"])((0, _extends3[\"default\"])({}, children.props), mergedControl);\n\n      if (!childProps.id) {\n        childProps.id = fieldId;\n      }\n\n      if ((0, _ref2.supportRef)(children)) {\n        childProps.ref = getItemRef(mergedName, children);\n      } // We should keep user origin event handler\n\n\n      var triggers = new Set([].concat((0, _toConsumableArray2[\"default\"])((0, _util.toArray)(trigger)), (0, _toConsumableArray2[\"default\"])((0, _util.toArray)(mergedValidateTrigger))));\n      triggers.forEach(function (eventName) {\n        childProps[eventName] = function () {\n          var _a2, _c2;\n\n          var _a, _b, _c;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [mergedControl].concat(args));\n          (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));\n        };\n      });\n      childNode = /*#__PURE__*/React.createElement(MemoInput, {\n        value: mergedControl[props.valuePropName || 'value'],\n        update: updateRef.current\n      }, (0, _reactNode.cloneElement)(children, childProps));\n    } else if (isRenderProps && (shouldUpdate || dependencies) && !hasName) {\n      childNode = children(context);\n    } else {\n      (0, _devWarning[\"default\"])(!mergedName.length, 'Form.Item', '`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.');\n      childNode = children;\n    }\n\n    return renderLayout(childNode, fieldId, meta, isRequired);\n  });\n}\n\nvar _default = FormItem;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"module"}