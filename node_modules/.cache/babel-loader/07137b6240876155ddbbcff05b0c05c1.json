{"ast":null,"code":"var _jsxFileName = \"D:\\\\ROR\\\\2021-outline-tool-no-docker\\\\app\\\\javascript\\\\components\\\\templateType\\\\_index.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport React from \"react\";\nimport NewTemplate from \"./_entry\";\nimport TemplateList from \"./_list\";\n\nvar Main = /*#__PURE__*/function (_React$Component) {\n  _inherits(Main, _React$Component);\n\n  var _super = _createSuper(Main);\n\n  function Main() {\n    _classCallCheck(this, Main);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Main, [{\n    key: \"render\",\n    value: // handleFormSubmit(name, description){\n    //       let body = JSON.stringify({fruit: {name: name, description:   description} })\n    //       fetch('http://localhost:3000/api/v1/fruits', {\n    //         method: 'POST',\n    //         headers: {\n    //           'Content-Type': 'application/json'\n    //         },\n    //         body: body,\n    //       }).then((response) => {return response.json()})\n    //       .then((fruit)=>{\n    //         this.addNewFruit(fruit)\n    //       })\n    //     }\n    function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NewTemplate, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(TemplateList, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return Main;\n}(React.Component);\n\nexport default Main;","map":{"version":3,"sources":["D:/ROR/2021-outline-tool-no-docker/app/javascript/components/templateType/_index.jsx"],"names":["React","NewTemplate","TemplateList","Main","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,UAAxB;AACA,OAAOC,YAAP,MAAyB,SAAzB;;IAEMC,I;;;;;;;;;;;;;WAEJ;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,sBAAS;AACP,0BACE,uDACA,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,eAEA,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,CADF;AAMD;;;;EAzBgBH,KAAK,CAACI,S;;AA4BzB,eAAeD,IAAf","sourcesContent":["import React from \"react\";\r\nimport NewTemplate from \"./_entry\";\r\nimport TemplateList from \"./_list\";\r\n\r\nclass Main extends React.Component {\r\n\r\n  // handleFormSubmit(name, description){\r\n  //       let body = JSON.stringify({fruit: {name: name, description:   description} })\r\n\r\n  //       fetch('http://localhost:3000/api/v1/fruits', {\r\n  //         method: 'POST',\r\n  //         headers: {\r\n  //           'Content-Type': 'application/json'\r\n  //         },\r\n  //         body: body,\r\n  //       }).then((response) => {return response.json()})\r\n  //       .then((fruit)=>{\r\n  //         this.addNewFruit(fruit)\r\n  //       })\r\n        \r\n  //     }\r\n\r\n  render() {\r\n    return(\r\n      <>\r\n      <NewTemplate />\r\n      <TemplateList/>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}