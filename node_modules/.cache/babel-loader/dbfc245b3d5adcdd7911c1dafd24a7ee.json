{"ast":null,"code":"var _jsxFileName = \"D:\\\\2021-outline-tool-no-docker-master\\\\app\\\\javascript\\\\components\\\\group\\\\_index.jsx\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport React from \"react\";\nimport I18n from \"i18n-js\";\nimport \"../../bundles/i18n/ja.js\";\nimport Entry from \"./_entry.jsx\";\nimport List from \"./_list.jsx\";\nimport { Layout, message } from \"antd\";\nimport { configConsumerProps } from \"antd/lib/config-provider/index.js\";\n\nvar Group = /*#__PURE__*/function (_React$Component) {\n  _inherits(Group, _React$Component);\n\n  var _super = _createSuper(Group);\n\n  function Group() {\n    var _this;\n\n    _classCallCheck(this, Group);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      groups: [],\n      searchText: \"\",\n      searchedColumn: \"\",\n      group_name: \"\",\n      group_description: \"\",\n      editGroups: [],\n      editStatus: false,\n      message: \"\",\n      messageType: \"\",\n      visible: false\n    };\n    _this.formRef = /*#__PURE__*/React.createRef();\n\n    _this.loadGroups = function () {\n      var url = \"/api/v1/group/index\";\n      fetch(url).then(function (data) {\n        if (data.ok) {\n          return data.json();\n        } else {\n          _this.setState({\n            message: I18n.t(\"message.M060\"),\n            messageType: \"error\",\n            visible: true\n          });\n        }\n\n        throw new Error(\"Network error.\");\n      }).then(function (data) {\n        data.forEach(function (group) {\n          var newEl = {\n            key: group.id,\n            id: group.id,\n            name: group.group_name,\n            description: group.group_description\n          };\n\n          _this.setState(function (prevState) {\n            return {\n              groups: [].concat(_toConsumableArray(prevState.groups), [newEl])\n            };\n          });\n        });\n      })[\"catch\"](function (err) {\n        return message.error(\"Error: \" + err);\n      });\n    };\n\n    _this.editGroup = function (values, currentForm) {\n      // 👇️ filter with 1 condition\n      var filtered = _this.state.groups.filter(function (group) {\n        return group.id === values.id;\n      });\n\n      if (filtered.length <= 0) {\n        _this.setState({\n          message: \"グループ名が存在しません。\",\n          messageType: \"warning\",\n          visible: true\n        });\n      } else {\n        fetch(\"/api/v1/group/get/\".concat(values.group_name)).then(function (data) {\n          if (data.ok) {\n            return data.json();\n          }\n\n          throw new Error(\"Network error.\");\n        }).then(function (data) {\n          var count = Object.keys(data).length; //グループ名が既にテーブル「group」にある場合警告メッセージを表示すする\n\n          if (count > 0) {\n            if (data[0].id != values.id) {\n              _this.setState({\n                message: I18n.t(\"message.M009\"),\n                messageType: \"warning\",\n                visible: true\n              });\n            } //グループ名が既にテーブル「group」にない場合テーブルに更新すする\n            else {\n              fetch(\"/api/v1/group/update/\".concat(values.id), {\n                method: \"PUT\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(values)\n              }).then(function (data) {\n                //更新が成功の場合　成功メッセージを表示すする\n                if (data.ok) {\n                  _this.setState({\n                    message: I18n.t(\"message.M005\"),\n                    messageType: \"success\",\n                    visible: true\n                  });\n\n                  return data.json();\n                } //更新が失敗の場合　エラーメッセージを表示すする\n                else {\n                  _this.setState({\n                    message: I18n.t(\"message.M058\"),\n                    messageType: \"error\",\n                    visible: true\n                  });\n                }\n              }).then(function (data) {\n                //更新値を一れんに更新すする\n                var ItemsCopy = [];\n\n                var x = _this.state.groups.map(function (entry) {\n                  if (entry.id == data.id) {\n                    entry.name = data.group_name;\n                    entry.description = data.group_description;\n                  }\n\n                  ItemsCopy.push(entry);\n                });\n\n                _this.setState({\n                  groups: ItemsCopy\n                });\n\n                _this.updateItem(data.id, data);\n              });\n              currentForm.current.resetFields();\n            }\n          } //グループ名が既にテーブル「group」にない場合テーブルに更新すする\n          else {\n            fetch(\"/api/v1/group/update/\".concat(values.id), {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(values)\n            }).then(function (data) {\n              if (data.ok) {\n                //更新が成功の場合　成功メッセージを表示すする\n                _this.setState({\n                  message: I18n.t(\"message.M005\"),\n                  messageType: \"success\",\n                  visible: true\n                });\n\n                return data.json();\n              } else {\n                //更新が失敗の場合　エラーメッセージを表示すする\n                _this.setState({\n                  message: I18n.t(\"message.M058\"),\n                  messageType: \"error\",\n                  visible: true\n                });\n              }\n            }).then(function (data) {\n              //更新値を一れんに更新すする\n              var ItemsCopy = [];\n\n              var x = _this.state.groups.map(function (entry) {\n                if (entry.id == data.id) {\n                  entry.name = data.group_name;\n                  entry.description = data.group_description;\n                }\n\n                ItemsCopy.push(entry);\n              });\n\n              _this.setState({\n                groups: ItemsCopy\n              });\n\n              _this.updateItem(data.id, data); // this.updateGroupList(data);\n\n            });\n            currentForm.current.resetFields();\n          }\n        });\n      }\n    };\n\n    _this.actionNewOrEdit = function (values, currentForm) {\n      if (values.id > 0) {\n        _this.editGroup(values, currentForm);\n      } else {\n        _this.createGroup(values, currentForm);\n      }\n    };\n\n    _this.createGroup = function (values, currentForm) {\n      var url = \"/api/v1/group/create\";\n      fetch(\"/api/v1/group/get/\".concat(values.group_name)).then(function (data) {\n        if (data.ok) {\n          return data.json();\n        }\n\n        throw new Error(\"Network error.\");\n      }).then(function (data) {\n        var count = Object.keys(data).length;\n\n        if (count > 0) {\n          _this.setState({\n            message: I18n.t(\"message.M009\"),\n            messageType: \"warning\",\n            visible: true\n          });\n        } else {\n          fetch(url, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(values)\n          }).then(function (data) {\n            if (data.ok) {\n              return data.json(); // 登録するが失敗する場合、エラーメッセージを表示される\n            } else {\n              _this.setState({\n                message: I18n.t(\"message.M056\"),\n                messageType: \"error\",\n                visible: true\n              });\n            }\n          }).then(function (data) {\n            var newEl = {\n              key: data.id,\n              id: data.id,\n              name: data.group_name,\n              description: data.group_description\n            };\n\n            _this.setState(function (prevState) {\n              return {\n                groups: [].concat(_toConsumableArray(prevState.groups), [newEl])\n              };\n            });\n\n            _this.setState({\n              message: I18n.t(\"message.M004\"),\n              messageType: \"success\",\n              visible: true\n            });\n          });\n          currentForm.current.resetFields();\n        }\n      })[\"catch\"](function (err) {\n        return message.error(\"Error: \" + err);\n      });\n    };\n\n    _this.deleteStatus = function (e) {\n      var url = \"/api/v1/group/destroy\";\n      fetch(\"/api/v1/group/destroy/\".concat(e.id), {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(e)\n      }).then(function (data) {\n        if (data.ok) {\n          //削除が成功の後でメッセージを表示する\n          _this.setState({\n            message: I18n.t(\"message.M007\"),\n            messageType: \"success\",\n            visible: true\n          }); //一連で削除すする\n\n\n          _this.removeGroupFromList(e.id);\n\n          return data.json();\n        } else {\n          //削除が失敗の場合エラーメッセージをひひょうじする\n          _this.setState({\n            message: I18n.t(\"message.M059\"),\n            messageType: \"error\",\n            visible: true\n          });\n        }\n      });\n    };\n\n    _this.editStatus = function (e) {\n      _this.formRef.current.setFieldsValue({\n        group_name: e.name,\n        group_description: e.description,\n        id: e.id\n      });\n\n      _this.setState({\n        editStatus: true\n      });\n    };\n\n    _this.setForm = function (currentForm) {\n      _this.formRef = currentForm;\n    };\n\n    _this.handleClose = function () {\n      _this.setState({\n        visible: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Group, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadGroups();\n    } // 取得グループデータ\n\n  }, {\n    key: \"updateItem\",\n    value: //一連に値を更新すする\n    function updateItem(id, itemAttributes) {\n      var index = this.state.groups.findIndex(function (x) {\n        return x.id === id;\n      });\n      this.setState({\n        groups: [].concat(_toConsumableArray(this.state.groups.slice(0, index)), [Object.assign({}, this.state.groups[index], itemAttributes)], _toConsumableArray(this.state.groups.slice(index + 1)))\n      });\n    }\n  }, {\n    key: \"removeGroupFromList\",\n    value: //一連で　グループを　削除\n    function removeGroupFromList(id) {\n      var newGroup = this.state.groups.filter(function (group) {\n        return group.id !== id;\n      });\n      this.setState({\n        groups: newGroup\n      });\n    } //メッセージ　を閉じるる\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Layout, {\n        style: {\n          minHeight: \"100vh\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Entry, {\n        createGroup: this.actionNewOrEdit,\n        formData: this.state.editGroups,\n        setForm: this.setForm,\n        message: this.state.message,\n        messageType: this.state.messageType,\n        visible: this.state.visible,\n        handleClose: this.handleClose,\n        dataSource: this.state.groups,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(List, {\n        dataSource: this.state.groups,\n        deleteStatus: this.deleteStatus,\n        editStatus: this.editStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Group;\n}(React.Component);\n\nexport default Group;","map":{"version":3,"sources":["D:/2021-outline-tool-no-docker-master/app/javascript/components/group/_index.jsx"],"names":["React","I18n","Entry","List","Layout","message","configConsumerProps","Group","state","groups","searchText","searchedColumn","group_name","group_description","editGroups","editStatus","messageType","visible","formRef","createRef","loadGroups","url","fetch","then","data","ok","json","setState","t","Error","forEach","group","newEl","key","id","name","description","prevState","err","error","editGroup","values","currentForm","filtered","filter","length","count","Object","keys","method","headers","body","JSON","stringify","ItemsCopy","x","map","entry","push","updateItem","current","resetFields","actionNewOrEdit","createGroup","deleteStatus","e","removeGroupFromList","setFieldsValue","setForm","handleClose","itemAttributes","index","findIndex","slice","assign","newGroup","minHeight","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport I18n from \"i18n-js\";\r\nimport \"../../bundles/i18n/ja.js\";\r\nimport Entry from \"./_entry.jsx\";\r\nimport List from \"./_list.jsx\";\r\nimport { Layout, message } from \"antd\";\r\nimport { configConsumerProps } from \"antd/lib/config-provider/index.js\";\r\n\r\nclass Group extends React.Component {\r\n  state = {\r\n    groups: [],\r\n    searchText: \"\",\r\n    searchedColumn: \"\",\r\n    group_name: \"\",\r\n    group_description: \"\",\r\n    editGroups: [],\r\n    editStatus: false,\r\n    message: \"\",\r\n    messageType: \"\",\r\n    visible: false,\r\n  };\r\n\r\n  formRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    this.loadGroups();\r\n  }\r\n\r\n  // 取得グループデータ\r\n  loadGroups = () => {\r\n    const url = \"/api/v1/group/index\";\r\n\r\n    fetch(url)\r\n      .then((data) => {\r\n        if (data.ok) {\r\n          return data.json();\r\n        } else {\r\n          this.setState({\r\n            message: I18n.t(\"message.M060\"),\r\n            messageType: \"error\",\r\n            visible: true,\r\n          });\r\n        }\r\n        throw new Error(\"Network error.\");\r\n      })\r\n      .then((data) => {\r\n        data.forEach((group) => {\r\n          const newEl = {\r\n            key: group.id,\r\n            id: group.id,\r\n            name: group.group_name,\r\n            description: group.group_description,\r\n          };\r\n\r\n          this.setState((prevState) => ({\r\n            groups: [...prevState.groups, newEl],\r\n          }));\r\n        });\r\n      })\r\n      .catch((err) => message.error(\"Error: \" + err));\r\n  };\r\n\r\n  //グループ　更新するため\r\n  editGroup = (values, currentForm) => {\r\n    // 👇️ filter with 1 condition\r\n    const filtered = this.state.groups.filter((group) => {\r\n      return group.id === values.id;\r\n    });\r\n\r\n    if (filtered.length <= 0) {\r\n      this.setState({\r\n        message: \"グループ名が存在しません。\",\r\n        messageType: \"warning\",\r\n        visible: true,\r\n      });\r\n    } else {\r\n      fetch(`/api/v1/group/get/${values.group_name}`)\r\n        .then((data) => {\r\n          if (data.ok) {\r\n            return data.json();\r\n          }\r\n          throw new Error(\"Network error.\");\r\n        })\r\n        .then((data) => {\r\n          var count = Object.keys(data).length;\r\n          //グループ名が既にテーブル「group」にある場合警告メッセージを表示すする\r\n          if (count > 0) {\r\n            if (data[0].id != values.id) {\r\n              this.setState({\r\n                message: I18n.t(\"message.M009\"),\r\n                messageType: \"warning\",\r\n                visible: true,\r\n              });\r\n            }\r\n            //グループ名が既にテーブル「group」にない場合テーブルに更新すする\r\n            else {\r\n              fetch(`/api/v1/group/update/${values.id}`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(values),\r\n              })\r\n                .then((data) => {\r\n                  //更新が成功の場合　成功メッセージを表示すする\r\n                  if (data.ok) {\r\n                    this.setState({\r\n                      message: I18n.t(\"message.M005\"),\r\n                      messageType: \"success\",\r\n                      visible: true,\r\n                    });\r\n                    return data.json();\r\n                  }\r\n                  //更新が失敗の場合　エラーメッセージを表示すする\r\n                  else {\r\n                    this.setState({\r\n                      message: I18n.t(\"message.M058\"),\r\n                      messageType: \"error\",\r\n                      visible: true,\r\n                    });\r\n                  }\r\n                })\r\n                .then((data) => {\r\n                  //更新値を一れんに更新すする\r\n                  let ItemsCopy = [];\r\n                  let x = this.state.groups.map((entry) => {\r\n                    if (entry.id == data.id) {\r\n                      entry.name = data.group_name;\r\n                      entry.description = data.group_description;\r\n                    }\r\n\r\n                    ItemsCopy.push(entry);\r\n                  });\r\n\r\n                  this.setState({ groups: ItemsCopy });\r\n\r\n                  this.updateItem(data.id, data);\r\n                });\r\n\r\n              currentForm.current.resetFields();\r\n            }\r\n          }\r\n          //グループ名が既にテーブル「group」にない場合テーブルに更新すする\r\n          else {\r\n            fetch(`/api/v1/group/update/${values.id}`, {\r\n              method: \"PUT\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(values),\r\n            })\r\n              .then((data) => {\r\n                if (data.ok) {\r\n                  //更新が成功の場合　成功メッセージを表示すする\r\n                  this.setState({\r\n                    message: I18n.t(\"message.M005\"),\r\n                    messageType: \"success\",\r\n                    visible: true,\r\n                  });\r\n                  return data.json();\r\n                } else {\r\n                  //更新が失敗の場合　エラーメッセージを表示すする\r\n                  this.setState({\r\n                    message: I18n.t(\"message.M058\"),\r\n                    messageType: \"error\",\r\n                    visible: true,\r\n                  });\r\n                }\r\n              })\r\n              .then((data) => {\r\n                //更新値を一れんに更新すする\r\n                let ItemsCopy = [];\r\n                let x = this.state.groups.map((entry) => {\r\n                  if (entry.id == data.id) {\r\n                    entry.name = data.group_name;\r\n                    entry.description = data.group_description;\r\n                  }\r\n\r\n                  ItemsCopy.push(entry);\r\n                });\r\n\r\n                this.setState({ groups: ItemsCopy });\r\n\r\n                this.updateItem(data.id, data);\r\n                // this.updateGroupList(data);\r\n              });\r\n\r\n            currentForm.current.resetFields();\r\n          }\r\n        });\r\n    }\r\n  };\r\n  //一連に値を更新すする\r\n  updateItem(id, itemAttributes) {\r\n    var index = this.state.groups.findIndex((x) => x.id === id);\r\n\r\n    this.setState({\r\n      groups: [\r\n        ...this.state.groups.slice(0, index),\r\n        Object.assign({}, this.state.groups[index], itemAttributes),\r\n        ...this.state.groups.slice(index + 1),\r\n      ],\r\n    });\r\n  }\r\n\r\n  actionNewOrEdit = (values, currentForm) => {\r\n    if (values.id > 0) {\r\n      this.editGroup(values, currentForm);\r\n    } else {\r\n      this.createGroup(values, currentForm);\r\n    }\r\n  };\r\n\r\n  //データベースにグループでーたを登録する\r\n  createGroup = (values, currentForm) => {\r\n    const url = \"/api/v1/group/create\";\r\n\r\n    fetch(`/api/v1/group/get/${values.group_name}`)\r\n      .then((data) => {\r\n        if (data.ok) {\r\n          return data.json();\r\n        }\r\n        throw new Error(\"Network error.\");\r\n      })\r\n      .then((data) => {\r\n        var count = Object.keys(data).length;\r\n        if (count > 0) {\r\n          this.setState({\r\n            message: I18n.t(\"message.M009\"),\r\n            messageType: \"warning\",\r\n            visible: true,\r\n          });\r\n        } else {\r\n          fetch(url, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(values),\r\n          })\r\n            .then((data) => {\r\n              if (data.ok) {\r\n                return data.json();\r\n                // 登録するが失敗する場合、エラーメッセージを表示される\r\n              } else {\r\n                this.setState({\r\n                  message: I18n.t(\"message.M056\"),\r\n                  messageType: \"error\",\r\n                  visible: true,\r\n                });\r\n              }\r\n            })\r\n            .then((data) => {\r\n              const newEl = {\r\n                key: data.id,\r\n                id: data.id,\r\n                name: data.group_name,\r\n                description: data.group_description,\r\n              };\r\n\r\n              this.setState((prevState) => ({\r\n                groups: [...prevState.groups, newEl],\r\n              }));\r\n              this.setState({\r\n                message: I18n.t(\"message.M004\"),\r\n                messageType: \"success\",\r\n                visible: true,\r\n              });\r\n            });\r\n\r\n          currentForm.current.resetFields();\r\n        }\r\n      })\r\n      .catch((err) => message.error(\"Error: \" + err));\r\n  };\r\n\r\n  //データを削除する\r\n  deleteStatus = (e) => {\r\n    const url = \"/api/v1/group/destroy\";\r\n    fetch(`/api/v1/group/destroy/${e.id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(e),\r\n    }).then((data) => {\r\n      if (data.ok) {\r\n        //削除が成功の後でメッセージを表示する\r\n        this.setState({\r\n          message: I18n.t(\"message.M007\"),\r\n          messageType: \"success\",\r\n          visible: true,\r\n        });\r\n        //一連で削除すする\r\n        this.removeGroupFromList(e.id);\r\n        return data.json();\r\n      } else {\r\n        //削除が失敗の場合エラーメッセージをひひょうじする\r\n        this.setState({\r\n          message: I18n.t(\"message.M059\"),\r\n          messageType: \"error\",\r\n          visible: true,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  //更新の値をFormに設定すする\r\n  editStatus = (e) => {\r\n    this.formRef.current.setFieldsValue({\r\n      group_name: e.name,\r\n      group_description: e.description,\r\n      id: e.id,\r\n    });\r\n\r\n    this.setState({ editStatus: true });\r\n  };\r\n\r\n  //登録画面の設定\r\n  setForm = (currentForm) => {\r\n    this.formRef = currentForm;\r\n  };\r\n\r\n  //一連で　グループを　削除\r\n  removeGroupFromList(id) {\r\n    const newGroup = this.state.groups.filter((group) => group.id !== id);\r\n    this.setState({\r\n      groups: newGroup,\r\n    });\r\n  }\r\n  //メッセージ　を閉じるる\r\n  handleClose = () => {\r\n    this.setState({ visible: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout style={{ minHeight: \"100vh\" }}>\r\n        <Entry\r\n          createGroup={this.actionNewOrEdit}\r\n          formData={this.state.editGroups}\r\n          setForm={this.setForm}\r\n          message={this.state.message}\r\n          messageType={this.state.messageType}\r\n          visible={this.state.visible}\r\n          handleClose={this.handleClose}\r\n          dataSource={this.state.groups}\r\n        />\r\n        <List\r\n          dataSource={this.state.groups}\r\n          deleteStatus={this.deleteStatus}\r\n          editStatus={this.editStatus}\r\n        />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Group;\r\n"]},"metadata":{},"sourceType":"module"}